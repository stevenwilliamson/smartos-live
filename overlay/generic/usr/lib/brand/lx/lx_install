#!/bin/ksh -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
# Copyright 2014 Joyent, Inc.  All rights reserved.
#

# Restrict executables to /bin, /usr/bin, /usr/sbin and /usr/sfw/bin
PATH=/bin:/usr/bin:/usr/sbin:/usr/sfw/bin

export PATH

# Setup i18n output
TEXTDOMAIN="SUNW_OST_OSCMD"
export TEXTDOMAIN

# Log passed arguments to file descriptor 2
log()
{
	[[ -n $logfile ]] && echo "$@" >&2
}

#
# Send the provided printf()-style arguments to the screen and to the
# logfile.
#
screenlog()
{
	typeset fmt="$1"
	shift

	printf "$fmt\n" "$@"
	[[ -n $logfile ]] && printf "$fmt\n" "$@" >&2
}

zone_initfail=$(gettext "Attempt to initialize zone '%s' FAILED.")
path_abs=$(gettext "Pathname specified to -d '%s' must be absolute.")

cmd=$(gettext "%s -z <zone name> %s")

not_found=$(gettext "%s: error: file or directory not found.")

wrong_type=\
$(gettext "%s: error: must be a gzip, bzip2, .Z or uncompressed tar archive.")

not_readable=$(gettext "Cannot read file '%s'")

no_install=$(gettext "Could not create install directory '%s'")
no_log=$(gettext "Could not create log directory '%s'")
no_logfile=$(gettext "Could not create log file '%s'")

root_full=$(gettext "Zonepath root %s exists and contains data; remove or move aside prior to install.")

install_zone=$(gettext "Installing zone '%s' at root directory '%s'")
install_from=$(gettext "from archive '%s'")

install_fail=$(gettext "Installation of zone '%s' FAILED.")
see_log=$(gettext "See the log file:\n  '%s'\nfor details.")

install_abort=$(gettext "Installation of zone '%s' aborted.")
install_good=$(gettext "Installation of zone '%s' completed successfully.")

# Clean up on interrupt
trap_cleanup()
{
	msg="Installation cancelled due to interrupt."

	screenlog "$msg"
	exit $int_code
}

usage()
{
	int_code=$ZONE_SUBPROC_USAGE

	echo $(gettext "Usage:")
	printf "  $cmd\n" "zoneadm" "install -d {path to archive}"

	echo

	exit $int_code
}

customize()
{
    zonecfg -z $ZONENAME info net | awk '
        BEGIN {
            printf("# interfaces(5) file used by ifup(8) and ifdown(8)\n")
            printf("auto lo0\n")
            printf("iface lo0 inet loopback\n")
            printf("\n")

        } {
            if ($1 == "physical:") {
                phys = $2
            } else if ($1 == "property:") {
                split($2, a, ",")
                split(a[1], k, "=")
                split(a[2], v, "=")

                val = substr(v[2], 2)
                val = substr(val, 1, length(val) - 2)

                if (k[2] == "ip")
                    ip = val
                else if (k[2] == "netmask")
                    mask = val
                else if (k[2] == "primary")
                    prim = val
            }

            if ($1 == "net:" && phys != "") {
                printf("auto %s\n", phys)
                printf("iface %s inet static\n", phys);
                printf("    address %s\n", ip);
                printf("    netmask %s\n", mask);
                printf("    up flush-mail\n");
                printf("\n")

                phys = ""
                prim = ""
            }
        }
        END {
            printf("auto %s\n", phys)
            printf("iface %s inet static\n", phys);
            printf("    address %s\n", ip);
            printf("    netmask %s\n", mask);
            printf("    up flush-mail\n");
        }' > $install_root/etc/network/interfaces
}

#
# The main body of the script starts here.
#
# This script should never be called directly by a user but rather should
# only be called by zoneadm to install a lx-branded zone.
#

#
# Exit values used by the script, as #defined in <sys/zone.h>
#
#	ZONE_SUBPROC_OK
#	===============
#	Installation was successful
#
#	ZONE_SUBPROC_USAGE
#	==================
#	Improper arguments were passed, so print a usage message before exiting
#
#	ZONE_SUBPROC_NOTCOMPLETE
#	========================
#	Installation did not complete, but another installation attempt can be
#	made without an uninstall
#
#	ZONE_SUBPROC_FATAL
#	==================
#	Installation failed and an uninstall will be required before another
#	install can be attempted
#
ZONE_SUBPROC_OK=0
ZONE_SUBPROC_USAGE=253
ZONE_SUBPROC_NOTCOMPLETE=254
ZONE_SUBPROC_FATAL=255

#
# An unspecified exit or interrupt should exit with ZONE_SUBPROC_NOTCOMPLETE,
# meaning a user will not need to do an uninstall before attempting another
# install.
#
int_code=$ZONE_SUBPROC_NOTCOMPLETE

trap trap_cleanup INT

# If we weren't passed at least two arguments, exit now.
[[ $# -lt 2 ]] && usage

#
# This script is always started with a full path so we can extract the
# brand directory name here.
#
branddir=$(dirname "$0")
REPROVISONING=""
ZONENAME="$1"
ZONEPATH="$2"
# Default to 10GB diskset quota
ZQUOTA=10

install_root="$ZONEPATH/root"
logdir="$install_root/var/log"

shift; shift	# remove zonename and zoneroot from arguments array

unset gtaropts
unset install_src
unset msg

while getopts "d:hq:rt:" opt
do
	case "$opt" in
		d) 	install_src="$OPTARG" ;;
		h) 	usage;;
		q)	ZQUOTA="$OPTARG";;
		r)	set -x
			REPROVISIONING="true"
			;;
		t)	TMPLZONE="$OPTARG";;
		*)	usage;;
	esac
done
shift OPTIND-1

if [[ $# -gt 0 ]]; then
	msg="ERROR: Too many arguments provided:"

	screenlog "$msg"
	screenlog "  \"%s\"" "$@"
	screenlog ""
	usage
fi

# Install tarball is required
if [[ -z $install_src ]]; then
	msg="ERROR: the install archive is required"

	screenlog "$msg"
	screenlog ""
	usage
fi

#
# Validate $install_src.
#
if [[ "`echo $install_src | cut -c 1`" != "/" ]]; then
	screenlog "$path_abs" "$install_src"
	exit $int_code
fi

if [[ ! -a "$install_src" ]]; then
	screenlog "$not_found" "$install_src"
	screenlog "$install_abort" "$ZONENAME"
	exit $int_code
fi

if [[ ! -r "$install_src" ]]; then
	screenlog "$not_readable" "$install_src"
	screenlog "$install_abort" "$ZONENAME"
	exit $int_code
fi

if [[ ! -f "$install_src" ]]; then
	screenlog "$wrong_type" "$install_src"
	screenlog "$install_abort" "$ZONENAME"
	exit $int_code
fi

filetype=`{ LC_ALL=C file $install_src | awk '{print $2}' ; } 2>/dev/null`

if [[ "$filetype" = "gzip" ]]; then
	gtaropts="-xz"
elif [[ "$filetype" = "bzip2" ]]; then
	gtaropts="-xj"
elif [[ "$filetype" = "compressed" ]]; then
	gtaropts="-xZ"
elif [[ "$filetype" = "USTAR" ]]; then
	gtaropts="-x"
else
	screenlog "$wrong_type" "$install_src"
	screenlog "$install_abort" "$ZONENAME"
	exit $int_code
fi

gtaropts="${gtaropts}f"

#
# IMPORTANT: all actions below need to consider reprovision. If the action
# modifies files in the zoneroot itself, it should be run on reprovision
# any other changes to the zone or dataset should not be done on reprovision.
#

if [[ -z ${REPROVISIONING} \
    && -n $(zonecfg -z "${ZONENAME}" info attr name=transition \
    | grep "value: receiving:") ]]; then

	# Here we're doing an install for a received zone, the dataset should
	# have already been created.
	exit $ZONE_SUBPROC_OK
fi

if [[ -z $ZONEPATH || -z $ZONENAME ]]; then
	print -u2 "Brand error: No zone path or name"
	exit $ZONE_SUBPROC_USAGE
fi

if [[ -z ${REPROVISIONING} ]]; then
	# The install requires a template zone.
	# XXX
#	if [[ -z $TMPLZONE ]]; then
#		print -u2 "Brand error: a zone template is required"
#		exit $ZONE_SUBPROC_USAGE
#	fi

	# The dataset quota must be a number.
	case $ZQUOTA in *[!0-9]*)
		print -u2 "Brand error: The quota $ZQUOTA is not a number"
		exit $ZONE_SUBPROC_USAGE;;
	esac
fi

ZROOT=$ZONEPATH/root

if [[ -z ${REPROVISIONING} ]]; then
	# Get the dataset of the parent directory of the zonepath.
	dname=${ZONEPATH%/*}
	bname=${ZONEPATH##*/}
	PDS_NAME=`mount | nawk -v p=$dname '{if ($1 == p) print $3}'`
	[ -z "$PDS_NAME" ] && \
	    print -u2 "Brand error: missing parent ZFS dataset for $dname"

	# We expect that zoneadm was invoked with '-x nodataset', so it won't
	# have created the dataset.

	QUOTA_ARG=
	if [[ ${ZQUOTA} != "0" ]]; then
		QUOTA_ARG="-o quota=${ZQUOTA}g"
	fi

	# XXX here is where we would snapshot and clone image dataset
	# just create dataset for now if its not already there

	zfs create ${QUOTA_ARG} ${PDS_NAME}/${bname}
fi

# The rest should be run when REPROVISIONING is set as well.

if [[ ! -d "$install_root" ]]; then
	if ! mkdir -p "$install_root" 2>/dev/null; then
		screenlog "$no_install" "$install_root"
		exit $int_code
	fi
fi

#
# Check for a non-empty root.
# 
cnt=`ls $install_root | wc -l`
if [ $cnt -ne 0 ]; then
	screenlog "$root_full" "$install_root"
	exit $int_code
fi

if [[ ! -d "$logdir" ]]; then
	if ! mkdir -p "$logdir" 2>/dev/null; then
		screenlog "$no_log" "$logdir"
		exit $int_code
	fi
fi

logfile="${logdir}/$ZONENAME.install.$$.log"

if ! > $logfile; then
	screenlog "$no_logfile" "$logfile"
	exit $int_code
fi

# Redirect stderr to the log file to automatically log any error messages
exec 2>>"$logfile"

#
# From here on out, an unspecified exit or interrupt should exit with
# ZONE_SUBPROC_FATAL, meaning a user will need to do an uninstall before
# attempting another install, as we've modified the directories we were going
# to install to in some way.
#
int_code=$ZONE_SUBPROC_FATAL

log "Installation started for zone \"$ZONENAME\" `/usr/bin/date`"

screenlog "$install_zone" "$ZONENAME" "$ZONEPATH"
screenlog "$install_from" "$install_src"
echo
echo $(gettext "This process may take several minutes.")
echo

if ! ( cd "$install_root" && gtar "$gtaropts" "$install_src" ) ; then
	log "Error: extraction from tar archive failed."
else
	if ! [[ -d "${install_root}/bin" &&
	    -d "${install_root}/sbin" ]]; then
		log "Error: improper or incomplete tar archive."
	else
		$branddir/lx_init_zone "$ZONENAME" "$install_root"

		#
		# Emit the same code from here whether we're
		# interrupted or exiting normally.
		#
		int_code=$?

		if [[ $int_code == 0 ]]; then
			customize
			int_code=$?
		fi
	fi
fi

mkdir $ZONEPATH/cores

if [[ $int_code -eq ZONE_SUBPROC_OK ]]; then
	log "Install completed for zone '$ZONENAME' `date`."
else
	log "Install failed for zone \"$ZONENAME\" `date`."
fi

if [[ $int_code -ne $ZONE_SUBPROC_OK ]]; then
	screenlog ""
	screenlog "$install_fail" "$ZONENAME"
	screenlog ""

	#
	# Only make a reference to the log file if one will exist after
	# zoneadm exits.
	#
	[[ $int_code -ne $ZONE_SUBPROC_NOTCOMPLETE ]] &&
	    screenlog "$see_log" "$logfile"

	exit $int_code
fi

#
# After the install completes, we've likely moved a new copy of the logfile into
# place atop the logfile we WERE writing to, so if we don't reopen the logfile
# here the shell will continue writing to the old logfile's inode, meaning we
# would lose all log information from this point on.
#
exec 2>>"$logfile"

screenlog ""
screenlog "$install_good" "$ZONENAME"
screenlog ""

echo $(gettext "Details saved to log file:")
echo "    \"$logfile\""
echo

if [[ -z ${REPROVISIONING} ]]; then
	# The cores quota exists to control run-away zones. As such we make it
	# such that it will protect the system from a single run-away, but
	# still allow us to get most cores. 100G seems good enough based on
	# samples from JPC.
	rm -rf $ZONEPATH/cores
	CORE_QUOTA=102400
	zfs create -o quota=${CORE_QUOTA}m \
	    -o mountpoint=/${PDS_NAME}/$bname/cores ${PDS_NAME}/cores/$bname

	chmod 700 $ZONEPATH
fi

exit $ZONE_SUBPROC_OK
