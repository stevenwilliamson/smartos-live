/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 */

// Ensure we're using the platform's node
require('/usr/node/node_modules/platform_node_version').assert();

var assert = require('assert');
var async = require('/usr/node/node_modules/async');
var fs = require('fs');
var path = require('path');
var vmload_utils = require('./vmload-utils');
var wantField = vmload_utils.wantField;

function getVmobjJSON(zonepath, options, callback) {
    var log;
    var result = {};

    assert(options.log, 'no logger passed to getVmobjJSON()');
    log = options.log;

    async.series([
        function (cb) {
            if (!wantField(options, 'customer_metadata')
                && !wantField(options, 'internal_metadata')) {

                cb();
                return;
            }

            loadJsonConfig(zonepath, 'metadata', log, function (err, metadata) {
                if (err) {
                    cb(err);
                    return;
                }

                ['customer_metadata', 'internal_metadata'].forEach(
                    function (m) {

                    if (wantField(options, m)) {
                        if (metadata.hasOwnProperty(m)) {
                            result[m] = metadata[m];
                        }
                    }
                });
                cb();
            });
        }, function (cb) {
            if (!wantField(options, 'tags')) {
                cb();
                return;
            }

            loadJsonConfig(zonepath, 'tags', log, function (err, tags) {
                if (err) {
                    cb(err);
                    return;
                }

                result.tags = tags;
                cb();
            });
        }, function (cb) {
            if (!wantField(options, 'routes')) {
                cb();
                return;
            }

            loadJsonConfig(zonepath, 'routes', log, function (err, routes) {
                if (err) {
                    cb(err);
                    return;
                }

                result.routes = routes;
                cb();
            });
        }
    ], function (err) {
        if (err) {
            callback(err);
            return;
        }

        callback(null, result);
    });
}

function loadJsonConfig(zonepath, cfg, log, callback)
{
    var filename;

    assert(log, 'no logger passed to loadJsonConfig()');
    assert(zonepath, 'no zonepath passed to loadJsonConfig()');

    filename = path.join(zonepath, 'config', cfg + '.json');
    log.trace('loadJsonConfig() loading ' + filename);

    fs.readFile(filename, function (error, data) {
        var json = {};

        if (error) {
            if (error.code === 'ENOENT') {
                log.debug('Skipping nonexistent file ' + filename);
            } else {
                log.error(error, 'loadJsonConfig() failed to load ' + filename);
                callback(error);
                return;
            }
        } else {
            try {
                json = JSON.parse(data.toString());
            } catch (e) {
                json = {};
            }
        }

        callback(null, json);
    });
}

module.exports = {
    getVmobjJSON: getVmobjJSON
};
